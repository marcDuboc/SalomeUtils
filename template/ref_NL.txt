# ------------------------------------------------------------------------------------------
# Impression du contenu du fichier de commandes à exécuter :
# ------------------------------------------------------------------------------------------
# Input file start
DEBUT(
    IGNORE_ALARM=('ALGORITH11_87','MECANONLINE_2','SUPERVIS2_2','SUPERVIS_1'),
    LANG='en',
    PAR_LOT='NON',
    );
	
# Initialize list for formulas and functions
F = [None]*6;

# Initialize list for boundary conditions
BC = [None]*3;

# Initialize list for materials
MAT = [None]*2;

# import math library for functions and formula
from math import *;

# import macros for result extension and rotation bcs
from rotatingMotion import rotation, GET_NAUTIC_ANGLES
from extendResult import EXTEND_RESULT
from computeContactPressure import COMPUTE_CONTACT_PRESSURE;
from getEnergie import GET_ENERGIE;
from calcMeshUtils import CALC_MESH_UTILS
from dataUtils import createDictFromTable;
# Definition of material: Steel

MAT[0]=DEFI_MATERIAU(
    ECRO_LINE=_F(
        D_SIGM_EPSI=204795000000.0,
        SY=205000000000000.0,
        ),
    ELAS=_F(
        E=205000000000.0,
        NU=0.28,
        RHO=7870.0,
        ),
    );

# Definition of material: Concrete
MAT[1]=DEFI_MATERIAU(
    ECRO_LINE=_F(
        D_SIGM_EPSI=29970000000.0,
        SY=30000000000000.0,
        ),
    ELAS=_F(
        E=30000000000.0,
        NU=0.2,
        RHO=2240.0,
        ),
    );
	
# Define mesh file
MESH=LIRE_MAILLAGE(
    FORMAT='MED',
    UNITE=20,
    );
	
# Creation of node groups from every element group
MESH=DEFI_GROUP(
    CREA_GROUP_NO=_F(
        TOUT_GROUP_MA='OUI',
        ),
    MAILLAGE=MESH,
    reuse=MESH,
    );

MESH=DEFI_GROUP(
    CREA_GROUP_MA=(_F(
            NOM='master_0',
            UNION=('face2'),
            ),
        _F(
            NOM='slave_0',
            UNION=('face8'),
            ),
        ),
    CREA_GROUP_NO=(_F(
            NOM='master_0',
            UNION=('face2'),
            ),
        _F(
            NOM='slave_0',
            UNION=('face8'),
            ),
        ),
    MAILLAGE=MESH,
    reuse=MESH,
    );

MESH=MODI_MAILLAGE(
    MAILLAGE=MESH,
    ORIE_PEAU_3D=_F(
        GROUP_MA=('master_0','slave_0'),
        ),
    reuse=MESH,
    );

# Add remote points/spider elements to mesh or get area and length information
MESH=CALC_MESH_UTILS(
    ADD_REMOTE_POINTS=_F(
        COORDINATES=(0.0,0.0,0.7),
        NAME='RP0_master',
        ),
    FILE_UNIT=50,
    MAILLAGE=MESH,
    reuse=MESH,
    );
MESH=DEFI_GROUP(
    CREA_GROUP_NO=_F(
        NOM='RP0_slave',
        UNION=('face75'),
        ),
    MAILLAGE=MESH,
    reuse=MESH,
    );

# Model definition of phenomena and element types
MODEL=AFFE_MODELE(
    AFFE=(_F(
            MODELISATION='3D',
            PHENOMENE='MECANIQUE',
            TOUT='OUI',
            ),
        _F(
            GROUP_MA=('region1','region2'),
            MODELISATION='3D',
            PHENOMENE='MECANIQUE',
            ),
        _F(
            GROUP_MA='RP0_master',
            MODELISATION='DIS_TR',
            PHENOMENE='MECANIQUE',
            ),
        ),
    MAILLAGE=MESH,
    );

CARAELEM=AFFE_CARA_ELEM(
    MODELE=MODEL,
    DISCRET=(_F(
            CARA='M_TR_D_N',
            GROUP_MA='RP0_master',
            VALE=(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0),
            ),
        _F(
            CARA='K_TR_D_N',
            GROUP_MA='RP0_master',
            VALE=(0.0,0.0,0.0,0.0,0.0,0.0),
            ),
        ),
    );
# Assignment of materials to mesh groups
MATS=AFFE_MATERIAU(
    AFFE=(_F(
            GROUP_MA=('region2'),
            MATER=MAT[0],
            ),
        _F(
            GROUP_MA=('region1'),
            MATER=MAT[1],
            ),
        ),
    MAILLAGE=MESH,
    );
	
# Definition of boundary condition: Remote force 2
BC[0]=AFFE_CHAR_MECA(
    MODELE=MODEL,
    LIAISON_RBE3=_F(
        COEF_ESCL=1.0,
        DDL_ESCL='DX-DY-DZ',
        DDL_MAIT=('DX','DY','DZ','DRX','DRY','DRZ'),
        GROUP_NO_ESCL='RP0_slave',
        GROUP_NO_MAIT='RP0_master',
        ),
    );

# Table function definition
F[0]=DEFI_FONCTION(
    ABSCISSE=(0.0,1.0),
    INTERPOL='LIN',
    NOM_PARA='INST',
    ORDONNEE=(0.0,4000.0),
    PROL_DROITE='LINEAIRE',
    PROL_GAUCHE='LINEAIRE',
    );
	
# Table function definition
F[1]=DEFI_FONCTION(
    ABSCISSE=(0.0,1.0),
    INTERPOL='LIN',
    NOM_PARA='INST',
    ORDONNEE=(0.0,-12000.0),
    PROL_DROITE='LINEAIRE',
    PROL_GAUCHE='LINEAIRE',
    );
	
# Table function definition
F[2]=DEFI_FONCTION(
    ABSCISSE=(0.0,1.0),
    INTERPOL='LIN',
    NOM_PARA='INST',
    ORDONNEE=(0.0,-36000.0),
    PROL_DROITE='LINEAIRE',
    PROL_GAUCHE='LINEAIRE',
    );
	
# Table function definition
F[3]=DEFI_FONCTION(
    ABSCISSE=(0.0,1.0),
    INTERPOL='LIN',
    NOM_PARA='INST',
    ORDONNEE=(0.0,-95000.0),
    PROL_DROITE='LINEAIRE',
    PROL_GAUCHE='LINEAIRE',
    );
	
# Table function definition
F[4]=DEFI_FONCTION(
    ABSCISSE=(0.0,1.0),
    INTERPOL='LIN',
    NOM_PARA='INST',
    ORDONNEE=(0.0,-15000.0),
    PROL_DROITE='LINEAIRE',
    PROL_GAUCHE='LINEAIRE',
    );
	
# Table function definition
F[5]=DEFI_FONCTION(
    ABSCISSE=(0.0,1.0),
    INTERPOL='LIN',
    NOM_PARA='INST',
    ORDONNEE=(0.0,14000.0),
    PROL_DROITE='LINEAIRE',
    PROL_GAUCHE='LINEAIRE',
    );

# Definition of boundary condition: Fixed support 1
BC[1]=AFFE_CHAR_CINE(
    MODELE=MODEL,
    MECA_IMPO=_F(
        DX=0.0,
        DY=0.0,
        DZ=0.0,
        GROUP_MA=('face89','face87','face86','face92','face88','face93','face1','face91','face90'),
        ),
    );

# Definition of boundary condition: Remote force 2
BC[2]=AFFE_CHAR_MECA_F(
    MODELE=MODEL,
    FORCE_NODALE=_F(
        FX=F[0],
        FY=F[1],
        FZ=F[2],
        GROUP_NO='RP0_master',
        MX=F[3],
        MY=F[4],
        MZ=F[5],
        ),
    );

TIMELIST=DEFI_LIST_REEL(
    DEBUT=0.0,
    INTERVALLE=_F(
        JUSQU_A=1.0,
        PAS=0.1,
        ),
    );

INSTLIST=DEFI_LIST_INST(
    ADAPTATION=_F(
        CRIT_COMP='LE',
        EVENEMENT='SEUIL',
        MODE_CALCUL_TPLUS='FIXE',
        NB_INCR_SEUIL=1,
        PCENT_AUGM=100,
        VALE_I=5,
        ),
    DEFI_LIST=_F(
        LIST_INST=TIMELIST,
        PAS_MINI=1e-05,
        ),
    ECHEC=(_F(
            ACTION='ITER_SUPPL',
            EVENEMENT='ERREUR',
            PCENT_ITER_PLUS=50,
            SUBD_METHODE='MANUEL',
            SUBD_NIVEAU=3,
            SUBD_PAS=4,
            SUBD_PAS_MINI=1e-05,
            ),
        _F(
            ACTION='DECOUPE',
            EVENEMENT='RESI_MAXI',
            RESI_GLOB_MAXI=10000000000,
            SUBD_METHODE='MANUEL',
            SUBD_NIVEAU=3,
            SUBD_PAS=2,
            SUBD_PAS_MINI=1e-05,
            ),
        ),
    METHODE='AUTO',
    );

# Physical contact model and contact zones defintion
CON=DEFI_CONTACT(
    ALGO_RESO_CONT='NEWTON',
    ALGO_RESO_GEOM='POINT_FIXE',
    FORMULATION='CONTINUE',
    FROTTEMENT='SANS',
    ITER_GEOM_MAXI=10,
    LISSAGE='NON',
    MODELE=MODEL,
    REAC_GEOM='AUTOMATIQUE',
    RESI_GEOM=0.05,
    ZONE=_F(
        ADAPTATION='CYCLAGE',
        ALGO_CONT='PENALISATION',
        COEF_PENA_CONT=1500000000000.0,
        GROUP_MA_ESCL='slave_0',
        GROUP_MA_MAIT='master_0',
        SANS_GROUP_NO=('master_0'),
        ),
    );

# Nonlinear static analysis definition
SIM=STAT_NON_LINE(
    AFFICHAGE=_F(
        INFO_RESIDU='NON',
        INFO_TEMPS='OUI',
        PAS=1,
        UNITE=19,
        ),
    ARCHIVAGE=_F(
        LIST_INST=TIMELIST,
        ),
    CARA_ELEM=CARAELEM,
    CHAM_MATER=MATS,
    COMPORTEMENT=(_F(
            DEFORMATION='GROT_GDEP',
            GROUP_MA=('region2'),
            RELATION='ELAS',
            ),
        _F(
            DEFORMATION='GROT_GDEP',
            GROUP_MA=('region1'),
            RELATION='ELAS',
            ),
        ),
    CONTACT=CON,
    CONVERGENCE=_F(
        ITER_GLOB_MAXI=35,
        RESI_GLOB_RELA=5e-05,
        ),
    EXCIT=(_F(
            CHARGE=BC[0],
            ),
        _F(
            CHARGE=BC[1],
            ),
        _F(
            CHARGE=BC[2],
            ),
        ),
    INCREMENT=_F(
        INST_FIN=1.0,
        LIST_INST=INSTLIST,
        ),
    METHODE='NEWTON',
    MODELE=MODEL,
    NEWTON=_F(
        MATRICE='TANGENTE',
        MATR_RIGI_SYME='NON',
        PREDICTION='TANGENTE',
        REAC_INCR=1,
        REAC_ITER=1,
        ),
    SOLVEUR=_F(
        METHODE='MUMPS',
        FILTRAGE_MATRICE=-1,
        GESTION_MEMOIRE='AUTO',
        MATR_DISTRIBUEE='NON',
        MIXER_PRECISION='NON',
        PCENT_PIVOT=20,
        POSTTRAITEMENTS='AUTO',
        PRETRAITEMENTS='AUTO',
        RENUM='SCOTCH',
        RESI_RELA=-1.0,
        TYPE_RESOL='AUTO',
        NPREC=-1,
        STOP_SINGULIER='NON',
        ),
    );
# Input file end
FIN(
    INFO_RESU='NON',
    RETASSAGE='NON',
    );

